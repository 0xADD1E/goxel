// This file is auto generated from tools/create_assets.py

static const uint8_t DATA_data_icons_png[1039]
                     __attribute__((aligned(4))) =
{
    137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,128,0,0,0,128,8,6,
    0,0,0,195,62,97,203,0,0,0,6,98,75,71,68,0,128,0,128,0,128,68,40,147,77,
    0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,7,116,73,
    77,69,7,224,6,13,14,13,10,248,95,38,6,0,0,0,25,116,69,88,116,67,111,109,
    109,101,110,116,0,67,114,101,97,116,101,100,32,119,105,116,104,32,71,73,
    77,80,87,129,14,23,0,0,3,119,73,68,65,84,120,218,237,220,77,114,242,48,
    12,128,97,169,195,45,88,245,36,116,207,245,122,21,246,237,97,122,14,117,
    67,190,9,52,182,37,91,9,225,227,125,102,58,83,104,254,176,101,203,54,77,
    68,240,210,244,238,181,21,222,143,178,142,115,79,251,233,147,150,165,53,
    62,219,238,3,96,42,252,209,32,48,17,17,51,251,40,158,84,245,171,113,126,
    93,41,232,162,21,228,189,22,43,156,195,130,231,146,133,58,40,253,190,74,
    244,154,153,157,204,236,20,44,208,63,199,169,109,179,112,124,27,168,76,
    169,28,203,243,123,237,152,214,177,109,100,191,140,207,59,228,112,31,237,
    170,58,213,210,135,170,90,103,107,209,198,54,167,74,107,217,67,26,176,
    39,76,77,182,80,158,181,215,55,1,112,191,129,168,234,119,32,8,204,25,153,
    218,248,219,72,16,100,181,252,249,117,122,175,67,23,142,173,193,253,71,
    198,110,165,247,91,129,208,238,90,156,233,192,34,21,148,120,204,236,20,
    96,193,215,165,84,208,93,54,3,41,192,10,159,209,42,215,38,111,173,72,158,
    122,130,149,115,154,183,85,173,146,7,131,199,179,70,122,11,183,186,13,
    102,117,225,107,137,246,4,230,140,208,72,15,208,59,96,243,254,100,238,
    223,91,38,79,51,168,104,85,220,154,1,16,237,154,123,83,128,57,207,147,
    121,221,107,164,0,11,164,167,155,89,64,115,30,219,57,48,252,51,223,159,
    102,26,29,233,64,59,231,216,25,41,167,103,192,166,34,98,63,231,243,191,
    55,142,151,203,90,51,138,251,50,185,47,127,245,140,1,154,133,226,24,19,
    204,115,161,22,70,166,209,197,152,251,107,177,66,190,179,192,239,61,149,
    219,83,113,122,188,92,182,154,5,200,66,165,167,4,91,171,43,116,45,0,37,
    229,66,75,232,246,189,163,249,158,69,157,234,49,127,206,103,79,10,205,
    72,1,173,215,205,20,80,155,163,183,22,130,100,96,155,86,15,176,197,168,
    90,37,113,109,191,80,233,107,207,0,212,211,107,28,6,10,101,233,111,150,
    208,117,149,2,198,26,11,32,145,150,175,193,160,79,115,188,92,180,113,253,
    15,249,46,0,0,240,114,52,48,210,36,239,188,80,0,220,44,94,200,251,187,
    28,63,63,9,130,23,9,128,219,202,39,8,254,107,111,20,1,61,128,72,255,194,
    138,6,199,11,182,210,249,209,233,208,83,152,102,118,154,253,99,231,210,
    254,165,181,122,117,236,191,156,130,68,228,186,166,174,133,253,65,10,192,
    94,2,96,190,52,108,18,91,82,93,252,246,108,106,253,84,217,122,41,96,203,
    53,6,79,16,176,14,241,228,1,240,200,0,2,99,0,16,0,8,117,179,54,176,239,
    30,246,7,0,164,116,163,54,216,237,102,252,123,245,232,53,160,115,26,104,
    165,123,251,35,247,3,56,158,15,80,58,86,117,255,235,53,16,8,43,245,0,197,
    10,190,222,205,51,85,94,235,246,239,90,160,216,245,230,146,165,227,88,
    45,112,22,130,136,32,72,156,6,86,91,183,170,126,207,90,166,85,42,95,28,
    1,130,157,245,0,238,138,41,244,4,161,251,238,103,223,230,21,167,130,149,
    20,240,197,120,32,95,104,14,238,120,196,75,245,28,206,155,76,139,119,229,
    14,60,194,6,142,65,96,86,64,141,182,78,90,247,198,99,0,217,81,171,162,
    117,63,40,0,240,226,41,32,243,126,184,204,231,3,96,227,110,55,250,0,167,
    232,3,152,90,219,88,112,16,138,132,20,176,116,39,106,107,190,223,51,248,
    243,108,67,23,177,211,1,88,232,249,51,29,219,120,182,51,90,127,158,204,
    47,131,178,159,175,195,151,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,216,222,47,248,232,218,95,27,242,21,147,0,0,0,0,73,69,78,68,
    174,66,96,130,
};

static const uint8_t DATA_data_palettes_inkscape_gpl[9231]
                     __attribute__((aligned(4))) =
    "GIMP Palette\n"
    "Name: Inkscape default\n"
    "Columns: 3\n"
    "# generated by PaletteGen.py\n"
    "  0   0   0  Black\n"
    " 26  26  26  90% Gray\n"
    " 51  51  51  80% Gray\n"
    " 77  77  77  70% Gray\n"
    "102 102 102  60% Gray\n"
    "128 128 128  50% Gray\n"
    "153 153 153  40% Gray\n"
    "179 179 179  30% Gray\n"
    "204 204 204  20% Gray\n"
    "230 230 230  10% Gray\n"
    "236 236 236  7.5% Gray\n"
    "242 242 242  5% Gray\n"
    "249 249 249  2.5% Gray\n"
    "255 255 255  White\n"
    "128   0   0  Maroon (#800000)\n"
    "255   0   0  Red (#FF0000)\n"
    "128 128   0  Olive (#808000)\n"
    "255 255   0  Yellow (#FFFF00)\n"
    "  0 128   0  Green (#008000)\n"
    "  0 255   0  Lime (#00FF00)\n"
    "  0 128 128  Teal (#008080)\n"
    "  0 255 255  Aqua (#00FFFF)\n"
    "  0   0 128  Navy (#000080)\n"
    "  0   0 255  Blue (#0000FF)\n"
    "128   0 128  Purple (#800080)\n"
    "255   0 255  Fuchsia (#FF00FF)\n"
    " 43   0   0  #2B0000\n"
    " 85   0   0  #550000\n"
    "128   0   0  #800000\n"
    "170   0   0  #AA0000\n"
    "212   0   0  #D40000\n"
    "255   0   0  #FF0000\n"
    "255  42  42  #FF2A2A\n"
    "255  85  85  #FF5555\n"
    "255 128 128  #FF8080\n"
    "255 170 170  #FFAAAA\n"
    "255 213 213  #FFD5D5\n"
    " 40  11  11  #280B0B\n"
    " 80  22  22  #501616\n"
    "120  33  33  #782121\n"
    "160  44  44  #A02C2C\n"
    "200  55  55  #C83737\n"
    "211  95  95  #D35F5F\n"
    "222 135 135  #DE8787\n"
    "233 175 175  #E9AFAF\n"
    "244 215 215  #F4D7D7\n"
    " 36  28  28  #241C1C\n"
    " 72  55  55  #483737\n"
    "108  83  83  #6C5353\n"
    "145 111 111  #916F6F\n"
    "172 147 147  #AC9393\n"
    "200 183 183  #C8B7B7\n"
    "227 219 219  #E3DBDB\n"
    " 43  17   0  #2B1100\n"
    " 85  34   0  #552200\n"
    "128  51   0  #803300\n"
    "170  68   0  #AA4400\n"
    "212  85   0  #D45500\n"
    "255 102   0  #FF6600\n"
    "255 127  42  #FF7F2A\n"
    "255 153  85  #FF9955\n"
    "255 179 128  #FFB380\n"
    "255 204 170  #FFCCAA\n"
    "255 230 213  #FFE6D5\n"
    " 40  23  11  #28170B\n"
    " 80  45  22  #502D16\n"
    "120  68  33  #784421\n"
    "160  90  44  #A05A2C\n"
    "200 113  55  #C87137\n"
    "211 141  95  #D38D5F\n"
    "222 170 135  #DEAA87\n"
    "233 198 175  #E9C6AF\n"
    "244 227 215  #F4E3D7\n"
    " 36  31  28  #241F1C\n"
    " 72  62  55  #483E37\n"
    "108  93  83  #6C5D53\n"
    "145 124 111  #917C6F\n"
    "172 157 147  #AC9D93\n"
    "200 190 183  #C8BEB7\n"
    "227 222 219  #E3DEDB\n"
    " 43  34   0  #2B2200\n"
    " 85  68   0  #554400\n"
    "128 102   0  #806600\n"
    "170 136   0  #AA8800\n"
    "212 170   0  #D4AA00\n"
    "255 204   0  #FFCC00\n"
    "255 212  42  #FFD42A\n"
    "255 221  85  #FFDD55\n"
    "255 230 128  #FFE680\n"
    "255 238 170  #FFEEAA\n"
    "255 246 213  #FFF6D5\n"
    " 40  34  11  #28220B\n"
    " 80  68  22  #504416\n"
    "120 103  33  #786721\n"
    "160 137  44  #A0892C\n"
    "200 171  55  #C8AB37\n"
    "211 188  95  #D3BC5F\n"
    "222 205 135  #DECD87\n"
    "233 221 175  #E9DDAF\n"
    "244 238 215  #F4EED7\n"
    " 36  34  28  #24221C\n"
    " 72  69  55  #484537\n"
    "108 103  83  #6C6753\n"
    "145 138 111  #918A6F\n"
    "172 167 147  #ACA793\n"
    "200 196 183  #C8C4B7\n"
    "227 226 219  #E3E2DB\n"
    " 34  43   0  #222B00\n"
    " 68  85   0  #445500\n"
    "102 128   0  #668000\n"
    "136 170   0  #88AA00\n"
    "170 212   0  #AAD400\n"
    "204 255   0  #CCFF00\n"
    "212 255  42  #D4FF2A\n"
    "221 255  85  #DDFF55\n"
    "229 255 128  #E5FF80\n"
    "238 255 170  #EEFFAA\n"
    "246 255 213  #F6FFD5\n"
    " 34  40  11  #22280B\n"
    " 68  80  22  #445016\n"
    "103 120  33  #677821\n"
    "137 160  44  #89A02C\n"
    "171 200  55  #ABC837\n"
    "188 211  95  #BCD35F\n"
    "205 222 135  #CDDE87\n"
    "221 233 175  #DDE9AF\n"
    "238 244 215  #EEF4D7\n"
    " 34  36  28  #22241C\n"
    " 69  72  55  #454837\n"
    "103 108  83  #676C53\n"
    "138 145 111  #8A916F\n"
    "167 172 147  #A7AC93\n"
    "196 200 183  #C4C8B7\n"
    "226 227 219  #E2E3DB\n"
    " 17  43   0  #112B00\n"
    " 34  85   0  #225500\n"
    " 51 128   0  #338000\n"
    " 68 170   0  #44AA00\n"
    " 85 212   0  #55D400\n"
    "102 255   0  #66FF00\n"
    "127 255  42  #7FFF2A\n"
    "153 255  85  #99FF55\n"
    "179 255 128  #B3FF80\n"
    "204 255 170  #CCFFAA\n"
    "229 255 213  #E5FFD5\n"
    " 23  40  11  #17280B\n"
    " 45  80  22  #2D5016\n"
    " 68 120  33  #447821\n"
    " 90 160  44  #5AA02C\n"
    "113 200  55  #71C837\n"
    "141 211  95  #8DD35F\n"
    "170 222 135  #AADE87\n"
    "198 233 175  #C6E9AF\n"
    "227 244 215  #E3F4D7\n"
    " 31  36  28  #1F241C\n"
    " 62  72  55  #3E4837\n"
    " 93 108  83  #5D6C53\n"
    "124 145 111  #7C916F\n"
    "157 172 147  #9DAC93\n"
    "190 200 183  #BEC8B7\n"
    "222 227 219  #DEE3DB\n"
    "  0  43   0  #002B00\n"
    "  0  85   0  #005500\n"
    "  0 128   0  #008000\n"
    "  0 170   0  #00AA00\n"
    "  0 212   0  #00D400\n"
    "  0 255   0  #00FF00\n"
    " 42 255  42  #2AFF2A\n"
    " 85 255  85  #55FF55\n"
    "128 255 128  #80FF80\n"
    "170 255 170  #AAFFAA\n"
    "213 255 213  #D5FFD5\n"
    " 11  40  11  #0B280B\n"
    " 22  80  22  #165016\n"
    " 33 120  33  #217821\n"
    " 44 160  44  #2CA02C\n"
    " 55 200  55  #37C837\n"
    " 95 211  95  #5FD35F\n"
    "135 222 135  #87DE87\n"
    "175 233 175  #AFE9AF\n"
    "215 244 215  #D7F4D7\n"
    " 28  36  28  #1C241C\n"
    " 55  72  55  #374837\n"
    " 83 108  83  #536C53\n"
    "111 145 111  #6F916F\n"
    "147 172 147  #93AC93\n"
    "183 200 183  #B7C8B7\n"
    "219 227 219  #DBE3DB\n"
    "  0  43  17  #002B11\n"
    "  0  85  34  #005522\n"
    "  0 128  51  #008033\n"
    "  0 170  68  #00AA44\n"
    "  0 212  85  #00D455\n"
    "  0 255 102  #00FF66\n"
    " 42 255 128  #2AFF80\n"
    " 85 255 153  #55FF99\n"
    "128 255 179  #80FFB3\n"
    "170 255 204  #AAFFCC\n"
    "213 255 230  #D5FFE6\n"
    " 11  40  23  #0B2817\n"
    " 22  80  45  #16502D\n"
    " 33 120  68  #217844\n"
    " 44 160  90  #2CA05A\n"
    " 55 200 113  #37C871\n"
    " 95 211 141  #5FD38D\n"
    "135 222 170  #87DEAA\n"
    "175 233 198  #AFE9C6\n"
    "215 244 227  #D7F4E3\n"
    " 28  36  31  #1C241F\n"
    " 55  72  62  #37483E\n"
    " 83 108  93  #536C5D\n"
    "111 145 124  #6F917C\n"
    "147 172 157  #93AC9D\n"
    "183 200 190  #B7C8BE\n"
    "219 227 222  #DBE3DE\n"
    "  0  43  34  #002B22\n"
    "  0  85  68  #005544\n"
    "  0 128 102  #008066\n"
    "  0 170 136  #00AA88\n"
    "  0 212 170  #00D4AA\n"
    "  0 255 204  #00FFCC\n"
    " 42 255 213  #2AFFD5\n"
    " 85 255 221  #55FFDD\n"
    "128 255 230  #80FFE6\n"
    "170 255 238  #AAFFEE\n"
    "213 255 246  #D5FFF6\n"
    " 11  40  34  #0B2822\n"
    " 22  80  68  #165044\n"
    " 33 120 103  #217867\n"
    " 44 160 137  #2CA089\n"
    " 55 200 171  #37C8AB\n"
    " 95 211 188  #5FD3BC\n"
    "135 222 205  #87DECD\n"
    "175 233 221  #AFE9DD\n"
    "215 244 238  #D7F4EE\n"
    " 28  36  34  #1C2422\n"
    " 55  72  69  #374845\n"
    " 83 108 103  #536C67\n"
    "111 145 138  #6F918A\n"
    "147 172 167  #93ACA7\n"
    "183 200 196  #B7C8C4\n"
    "219 227 226  #DBE3E2\n"
    "  0  34  43  #00222B\n"
    "  0  68  85  #004455\n"
    "  0 102 128  #006680\n"
    "  0 136 170  #0088AA\n"
    "  0 170 212  #00AAD4\n"
    "  0 204 255  #00CCFF\n"
    " 42 212 255  #2AD4FF\n"
    " 85 221 255  #55DDFF\n"
    "128 229 255  #80E5FF\n"
    "170 238 255  #AAEEFF\n"
    "213 246 255  #D5F6FF\n"
    " 11  34  40  #0B2228\n"
    " 22  68  80  #164450\n"
    " 33 103 120  #216778\n"
    " 44 137 160  #2C89A0\n"
    " 55 171 200  #37ABC8\n"
    " 95 188 211  #5FBCD3\n"
    "135 205 222  #87CDDE\n"
    "175 221 233  #AFDDE9\n"
    "215 238 244  #D7EEF4\n"
    " 28  34  36  #1C2224\n"
    " 55  69  72  #374548\n"
    " 83 103 108  #53676C\n"
    "111 138 145  #6F8A91\n"
    "147 167 172  #93A7AC\n"
    "183 196 200  #B7C4C8\n"
    "219 226 227  #DBE2E3\n"
    "  0  17  43  #00112B\n"
    "  0  34  85  #002255\n"
    "  0  51 128  #003380\n"
    "  0  68 170  #0044AA\n"
    "  0  85 212  #0055D4\n"
    "  0 102 255  #0066FF\n"
    " 42 127 255  #2A7FFF\n"
    " 85 153 255  #5599FF\n"
    "128 179 255  #80B3FF\n"
    "170 204 255  #AACCFF\n"
    "213 229 255  #D5E5FF\n"
    " 11  23  40  #0B1728\n"
    " 22  45  80  #162D50\n"
    " 33  68 120  #214478\n"
    " 44  90 160  #2C5AA0\n"
    " 55 113 200  #3771C8\n"
    " 95 141 211  #5F8DD3\n"
    "135 170 222  #87AADE\n"
    "175 198 233  #AFC6E9\n"
    "215 227 244  #D7E3F4\n"
    " 28  31  36  #1C1F24\n"
    " 55  62  72  #373E48\n"
    " 83  93 108  #535D6C\n"
    "111 124 145  #6F7C91\n"
    "147 157 172  #939DAC\n"
    "183 190 200  #B7BEC8\n"
    "219 222 227  #DBDEE3\n"
    "  0   0  43  #00002B\n"
    "  0   0  85  #000055\n"
    "  0   0 128  #000080\n"
    "  0   0 170  #0000AA\n"
    "  0   0 212  #0000D4\n"
    "  0   0 255  #0000FF\n"
    " 42  42 255  #2A2AFF\n"
    " 85  85 255  #5555FF\n"
    "128 128 255  #8080FF\n"
    "170 170 255  #AAAAFF\n"
    "213 213 255  #D5D5FF\n"
    " 11  11  40  #0B0B28\n"
    " 22  22  80  #161650\n"
    " 33  33 120  #212178\n"
    " 44  44 160  #2C2CA0\n"
    " 55  55 200  #3737C8\n"
    " 95  95 211  #5F5FD3\n"
    "135 135 222  #8787DE\n"
    "175 175 233  #AFAFE9\n"
    "215 215 244  #D7D7F4\n"
    " 28  28  36  #1C1C24\n"
    " 55  55  72  #373748\n"
    " 83  83 108  #53536C\n"
    "111 111 145  #6F6F91\n"
    "147 147 172  #9393AC\n"
    "183 183 200  #B7B7C8\n"
    "219 219 227  #DBDBE3\n"
    " 17   0  43  #11002B\n"
    " 34   0  85  #220055\n"
    " 51   0 128  #330080\n"
    " 68   0 170  #4400AA\n"
    " 85   0 212  #5500D4\n"
    "102   0 255  #6600FF\n"
    "127  42 255  #7F2AFF\n"
    "153  85 255  #9955FF\n"
    "179 128 255  #B380FF\n"
    "204 170 255  #CCAAFF\n"
    "229 213 255  #E5D5FF\n"
    " 23  11  40  #170B28\n"
    " 45  22  80  #2D1650\n"
    " 68  33 120  #442178\n"
    " 90  44 160  #5A2CA0\n"
    "113  55 200  #7137C8\n"
    "141  95 211  #8D5FD3\n"
    "170 135 222  #AA87DE\n"
    "198 175 233  #C6AFE9\n"
    "227 215 244  #E3D7F4\n"
    " 31  28  36  #1F1C24\n"
    " 62  55  72  #3E3748\n"
    " 93  83 108  #5D536C\n"
    "124 111 145  #7C6F91\n"
    "157 147 172  #9D93AC\n"
    "190 183 200  #BEB7C8\n"
    "222 219 227  #DEDBE3\n"
    " 34   0  43  #22002B\n"
    " 68   0  85  #440055\n"
    "102   0 128  #660080\n"
    "136   0 170  #8800AA\n"
    "170   0 212  #AA00D4\n"
    "204   0 255  #CC00FF\n"
    "212  42 255  #D42AFF\n"
    "221  85 255  #DD55FF\n"
    "229 128 255  #E580FF\n"
    "238 170 255  #EEAAFF\n"
    "246 213 255  #F6D5FF\n"
    " 34  11  40  #220B28\n"
    " 68  22  80  #441650\n"
    "103  33 120  #672178\n"
    "137  44 160  #892CA0\n"
    "171  55 200  #AB37C8\n"
    "188  95 211  #BC5FD3\n"
    "205 135 222  #CD87DE\n"
    "221 175 233  #DDAFE9\n"
    "238 215 244  #EED7F4\n"
    " 34  28  36  #221C24\n"
    " 69  55  72  #453748\n"
    "103  83 108  #67536C\n"
    "138 111 145  #8A6F91\n"
    "167 147 172  #A793AC\n"
    "196 183 200  #C4B7C8\n"
    "226 219 227  #E2DBE3\n"
    " 43   0  34  #2B0022\n"
    " 85   0  68  #550044\n"
    "128   0 102  #800066\n"
    "170   0 136  #AA0088\n"
    "212   0 170  #D400AA\n"
    "255   0 204  #FF00CC\n"
    "255  42 212  #FF2AD4\n"
    "255  85 221  #FF55DD\n"
    "255 128 229  #FF80E5\n"
    "255 170 238  #FFAAEE\n"
    "255 213 246  #FFD5F6\n"
    " 40  11  34  #280B22\n"
    " 80  22  68  #501644\n"
    "120  33 103  #782167\n"
    "160  44 137  #A02C89\n"
    "200  55 171  #C837AB\n"
    "211  95 188  #D35FBC\n"
    "222 135 205  #DE87CD\n"
    "233 175 221  #E9AFDD\n"
    "244 215 238  #F4D7EE\n"
    " 36  28  34  #241C22\n"
    " 72  55  69  #483745\n"
    "108  83 103  #6C5367\n"
    "145 111 138  #916F8A\n"
    "172 147 167  #AC93A7\n"
    "200 183 196  #C8B7C4\n"
    "227 219 226  #E3DBE2\n"
    " 43   0  17  #2B0011\n"
    " 85   0  34  #550022\n"
    "128   0  51  #800033\n"
    "170   0  68  #AA0044\n"
    "212   0  85  #D40055\n"
    "255   0 102  #FF0066\n"
    "255  42 127  #FF2A7F\n"
    "255  85 153  #FF5599\n"
    "255 128 178  #FF80B2\n"
    "255 170 204  #FFAACC\n"
    "255 213 229  #FFD5E5\n"
    " 40  11  23  #280B17\n"
    " 80  22  45  #50162D\n"
    "120  33  68  #782144\n"
    "160  44  90  #A02C5A\n"
    "200  55 113  #C83771\n"
    "211  95 141  #D35F8D\n"
    "222 135 170  #DE87AA\n"
    "233 175 198  #E9AFC6\n"
    "244 215 227  #F4D7E3\n"
    " 36  28  31  #241C1F\n"
    " 72  55  62  #48373E\n"
    "108  83  93  #6C535D\n"
    "145 111 124  #916F7C\n"
    "172 147 157  #AC939D\n"
    "200 183 190  #C8B7BE\n"
    "227 219 222  #E3DBDE\n"
    "";

static const uint8_t DATA_data_progs_planet_goxcf[523]
                     __attribute__((aligned(4))) =
    "// Simple planet\n"
    "shape main {\n"
    "    [s 50]\n"
    "    sphere [sat 0.5 light -0.75 hue 200]\n"
    "    loop 3 [] {\n"
    "        continent[rz 0+-180 ry 0+-180\n"
    "                  hue 1 40+-10 sat 1 0.5\n"
    "                  light -0.5+-0.1]\n"
    "    }\n"
    "    loop 16 [wait 1] {\n"
    "        cloud [rz 0+-180 ry 0+-180\n"
    "               hue 200 light -0.1 sat 0.5]\n"
    "    }\n"
    "}\n"
    "\n"
    "shape continent {\n"
    "    loop 30 [rz 10 rx 0+-80 wait 1] {\n"
    "        sphere[x 0.3 s 0.4+-0.05]\n"
    "    }\n"
    "}\n"
    "\n"
    "shape cloud {\n"
    "    loop 5 [rz 2 rx 0+-180 wait 1] {\n"
    "       sphere[x 0.5 s 0.04 +- 0.01]\n"
    "    }\n"
    "}\n"
    "";

static const uint8_t DATA_data_progs_intro_goxcf[2551]
                     __attribute__((aligned(4))) =
    "// The 'main' shape is always the entry point of the program.\n"
    "shape main {\n"
    "    // Initial random seed of 2.\n"
    "    // Remove this line to use different seed each time.\n"
    "    [seed 2]\n"
    "    // Improves marching cube rendering.\n"
    "    [antialiased 1]\n"
    "\n"
    "    // Render a single white voxel.\n"
    "    cube []\n"
    "\n"
    "    // Put an other cube next to it.\n"
    "    // 'x' applies a translation of 1 along x.\n"
    "    // Those transformation are only applied\n"
    "    // to this cube.\n"
    "    cube [x 1]\n"
    "\n"
    "    // Now render a bigger grey sphere.\n"
    "    // light -0.5 move the light value to half\n"
    "    // the current value of 1 and the target\n"
    "    sphere [s 10 x 1 light -0.5]\n"
    "\n"
    "    // We can also render cylinders:\n"
    "    cylinder [s 10 x -1 light -0.9]\n"
    "\n"
    "    // This time we use a user defined shape.\n"
    "    // And we increase the saturation to give it a color.\n"
    "    my_shape [z 20 light -0.5 sat 0.5]\n"
    "}\n"
    "\n"
    "// A user defined shape\n"
    "shape my_shape {\n"
    "    // s 8 8 1 scales with different values\n"
    "    // for each axis.\n"
    "    // rx A applies a rotation along z of\n"
    "    // 45 deg.\n"
    "\n"
    "    // Note that the color is red, because we set the\n"
    "    // Saturation when we called my_shape.\n"
    "    cube [s 8 8 1  z 1  rz 45]\n"
    "\n"
    "    // Loop 16 time, each time increasing the x\n"
    "    // translation and the hue.\n"
    "    loop 16 [x 2 hue 10] {\n"
    "      cube []\n"
    "    }\n"
    "    // The loop transformations only affect\n"
    "    // the loop block, after it we return to\n"
    "    // the previous context.\n"
    "    sphere [s 6 z 1]\n"
    "\n"
    "    // Let's try a recursive shape:\n"
    "    tree [x -10 s 4]\n"
    "\n"
    "    // And an other one with a bit or randomness:\n"
    "    tree2 [x 10 s 4 rz 180 hue 180]\n"
    "\n"
    "    // A shape with several rules:\n"
    "    my_other_shape [y 10 rz 90 hue -60 s 3]\n"
    "}\n"
    "\n"
    "// Tree render a cylinder and then call itself.\n"
    "// Since we scale down the shape at each iteration\n"
    "// at some point it becomes too small, and is\n"
    "// then automatically stopped.\n"
    "shape tree {\n"
    "    cylinder []\n"
    "    tree [z 1 s 0.99 ry -6]\n"
    "}\n"
    "\n"
    "shape tree2 {\n"
    "    cylinder []\n"
    "    // 'A +- B' means that we use a random value in the range\n"
    "    // A - B, A + B.  this make the second spiral a bit\n"
    "    // messy.\n"
    "    tree2 [z 1 s 0.99 ry -6+-6]\n"
    "}\n"
    "\n"
    "// Here 'my_other_shape' defines several rules.  The rule\n"
    "// used is picked randomly using the weight.\n"
    "shape my_other_shape\n"
    "\n"
    "// Most of the time, just keep growing in z.\n"
    "rule 15 {\n"
    "    cube []\n"
    "    my_other_shape [z 1]\n"
    "}\n"
    "\n"
    "// Sometime split into two\n"
    "rule 1 {\n"
    "    my_other_shape [rx 45 s 0.9]\n"
    "    my_other_shape [rx -45 s 0.9]\n"
    "}\n"
    "\n"
    "// Some other times render a shpere and stop\n"
    "rule 0.5 {\n"
    "    // 'hue 1 70' means that we immediatly set the hue\n"
    "    // to 70 (yellow).\n"
    "    sphere [s 3 hue 1 70]\n"
    "}\n"
    "";

static const uint8_t DATA_data_progs_test_goxcf[323]
                     __attribute__((aligned(4))) =
    "// Simple Test\n"
    "\n"
    "shape branch\n"
    "rule {\n"
    "    cylinder [sz 0.7]\n"
    "    branch [rz 0 z 0.25 s 0.9 rx 30 z 0.25\n"
    "            light -0.1 hue 10 sat 0.1]\n"
    "}\n"
    "rule 0.2 {\n"
    "branch [rz 180]\n"
    "}\n"
    "rule 0.2 {\n"
    "    branch [rz 90]\n"
    "}\n"
    "rule 0.1 {\n"
    "    branch [rx -90 s 0.8 z 1]\n"
    "    branch []\n"
    "}\n"
    "\n"
    "shape main {\n"
    "    [light 1 antialiased 1]\n"
    "    branch [s 32]\n"
    "}\n"
    "";

static const uint8_t DATA_data_progs_cherry_goxcf[469]
                     __attribute__((aligned(4))) =
    "shape main {\n"
    "    [seed 7]\n"
    "    tree(0, 40, 10)[s 10 light -0.9]\n"
    "}\n"
    "\n"
    "shape tree($n, $e, $f)\n"
    "rule {\n"
    "    cylinder[]\n"
    "    if ($n < $e) {\n"
    "        tree($n + 1)[rz 0+-10 z 0.5 s 0.95 z 0.5 rx 4]\n"
    "    }\n"
    "    if (($n >= $e) || ($n > $f && 0+-1 > 0.5)) {\n"
    "        flower[]\n"
    "    }\n"
    "}\n"
    "rule 0.1 {\n"
    "    tree[rz 180]\n"
    "}\n"
    "rule 0.08 {\n"
    "    tree[]\n"
    "    tree($n + 1)[rz 0+-180 rx -45]\n"
    "}\n"
    "\n"
    "shape flower {\n"
    "     [light 0.5 sat 0.7 sn 1 s 6 z -0.5 x -1 hue -10]\n"
    "     sphere[x 0+-0.5 0+-0.5 light 0+-0.2]\n"
    "}";

static const uint8_t DATA_data_progs_test2_goxcf[419]
                     __attribute__((aligned(4))) =
    "shape main {\n"
    "    [antialiased 1]\n"
    "    [light 0.5 sat 0.5 s 100]\n"
    "    loop 5 [s -0.95 light 0.1 sat 0.01 hue 5] {\n"
    "       sphere [light -0.6 hue 30]\n"
    "    }\n"
    "    loop 30 [wait 1] {\n"
    "        sphere [sub rz 0+-180 ry 0+-180\n"
    "                z 0.5 s 0.3]\n"
    "    }\n"
    "    loop 2 [rz 90] {\n"
    "        loop 120 [ry 10 wait 1] {\n"
    "            sphere [hue 30+-30 light -0.5+-0.4\n"
    "                    z 0.5 s 0.05+-0.01 z 4+-0.5]\n"
    "        }\n"
    "    }\n"
    "}\n"
    "";

static const uint8_t DATA_data_progs_test3_goxcf[302]
                     __attribute__((aligned(4))) =
    "shape main {\n"
    "   [antialiased 1]\n"
    "   loop 8 [rz 45] {\n"
    "       test [s 20 x 2]\n"
    "   }\n"
    "}\n"
    "\n"
    "shape test {\n"
    "    [sat 0.4 light -0.2 hue 240]\n"
    "    sphere[]\n"
    "    cube [z 0.5 sub]\n"
    "    tige (15) [s 0.5 light -0.5]\n"
    "}\n"
    "\n"
    "shape tige ($n) {\n"
    "    cylinder[]\n"
    "    if $n {\n"
    "        tige($n - 1)[z 0.5 ry $n z 0.5 sat -0.1]\n"
    "    }\n"
    "}\n"
    "";

static const uint8_t DATA_data_progs_city_goxcf[1199]
                     __attribute__((aligned(4))) =
    "shape main {\n"
    "    [seed 4]\n"
    "    city[]\n"
    "}\n"
    "\n"
    "shape ground {\n"
    "    [s 128 128 1\n"
    "     light -0.6 sat 0.2 hue 50]\n"
    "    cube[]\n"
    "    loop 16 [] {\n"
    "       cube[x 0+-0.4 0+-0.4 \n"
    "            s 0.2+-0.1 0.2+-0.1 3+-1\n"
    "            light -0.3+-0.2]\n"
    "    }\n"
    "}\n"
    "\n"
    "shape city {\n"
    "    ground[]\n"
    "    loop 128 [wait 1] {\n"
    "        building[x 0+-58 0+-58 s 2+-0.5\n"
    "                 sat 0.2+-0.1 hue 0+-180]\n"
    "    }\n"
    "}\n"
    "\n"
    "shape building\n"
    "// Tall building\n"
    "rule 1 {\n"
    "    [s 3]\n"
    "    $n = int(10+-5)\n"
    "    loop $n [z 1 wait 1] {\n"
    "        $s = 2+-0.2\n"
    "        floor[s $s $s 1 z 0.5]\n"
    "    }\n"
    "    [z $n - 0.5]\n"
    "    loop 1+-2 [] {\n"
    "        antenna[]\n"
    "    }\n"
    "}\n"
    "// Low building\n"
    "rule 1 {\n"
    "   [s 8+-4 8+-4 4+-2 z 0.5]\n"
    "   cube[light -0.3]\n"
    "   windows(8)[]\n"
    "   loop 2+-1 [] {antenna[]}\n"
    "}\n"
    "// Tree\n"
    "rule 10 {\n"
    "   [z 0.5 sn 1 z 0.5]\n"
    "   [sat 1 0.5 light 1 0.2 hue 1 20]\n"
    "   cube[z 0.5 sz 5]\n"
    "   loop 2 [] {\n"
    "       sphere[z 4 s 4+-1\n"
    "              x 0+-0.1 0+-0.1\n"
    "              hue 100+-40]\n"
    "   }\n"
    "}\n"
    "\n"
    "shape windows($n) {\n"
    "    loop $n [rz 90] {\n"
    "       cube[x 0.5 0+-0.4 sn s 1/3 x -0.5\n"
    "            light 1 1 light 0+-0.2]\n"
    "    }\n"
    "}\n"
    "\n"
    "shape floor {\n"
    "    cube[light -0.5+-0.1]\n"
    "    windows(8)[]\n"
    "}\n"
    "\n"
    "shape antenna {\n"
    "    [z 0.5 x 0+-0.4 0+-0.4\n"
    "     sn 1 sz 2+-1 z 0.5\n"
    "     light -0.5]\n"
    "    cube[]\n"
    "}";




static asset_t ASSETS[] = {

    {
        .path = "data/icons.png",
        .data = DATA_data_icons_png,
        .size = 1039,
    },

    {
        .path = "data/palettes/inkscape.gpl",
        .data = DATA_data_palettes_inkscape_gpl,
        .size = 9231,
    },

    {
        .path = "data/progs/planet.goxcf",
        .data = DATA_data_progs_planet_goxcf,
        .size = 523,
    },

    {
        .path = "data/progs/intro.goxcf",
        .data = DATA_data_progs_intro_goxcf,
        .size = 2551,
    },

    {
        .path = "data/progs/test.goxcf",
        .data = DATA_data_progs_test_goxcf,
        .size = 323,
    },

    {
        .path = "data/progs/cherry.goxcf",
        .data = DATA_data_progs_cherry_goxcf,
        .size = 469,
    },

    {
        .path = "data/progs/test2.goxcf",
        .data = DATA_data_progs_test2_goxcf,
        .size = 419,
    },

    {
        .path = "data/progs/test3.goxcf",
        .data = DATA_data_progs_test3_goxcf,
        .size = 302,
    },

    {
        .path = "data/progs/city.goxcf",
        .data = DATA_data_progs_city_goxcf,
        .size = 1199,
    },

    {0}

};

