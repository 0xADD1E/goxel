/* A recursive-descent parser generated by peg 0.1.15 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 14

    // Do not edit the .inc file directly, instead edit procedural.leg.
    #include <assert.h>
    #include <stdio.h>
    #include <stdarg.h>
    #include <stdlib.h>
    #include "utlist.h"

    #define YYSTYPE node_t*
    #define YY_CTX_LOCAL 1
    #define YY_CTX_MEMBERS int line, read_line;

    // XXX: I should move those into YY_CTX_MEMBERS.
    static node_t *g_prog = NULL;
    static const char *g_input = NULL;
    static const char *g_cur = NULL;

    // Redefine YY_INPUT to keep track of the last read line in the input.
    #define YY_INPUT(ctx, buf, result, max_size)    \
    {                                               \
        int yyc = *g_cur;                           \
        if (yyc == '\n') ctx->read_line++;          \
        if (yyc) {g_cur++; *buf = yyc; result = 1;} \
        else result = 0;                            \
    }                                               \

    static node_t *node_create(int type, const char *id, int line,
                               int nb, node_t **children)
    {
        int i;
        node_t *node = calloc(1, sizeof(*node));
        node->type = type;
        node->id = id ? strdup(id) : NULL;
        node->line = line;
        node->size = nb;
        for (i = 0; i < nb; i++) {
            assert(children[i]);
            DL_APPEND(node->children, children[i]);
        }
        return node;
    }

    // Convenience macro to create a node.
    #define N(type, id, ...) ({ \
        node_t *nodes[] = {__VA_ARGS__}; \
        node_create(NODE_##type, id, yy->line, ARRAY_SIZE(nodes), nodes); \
    })

    // Convenience function to append a node to an other one.
    static void A(node_t *node, node_t *c)
    {
        assert(node);
        assert(c);
        assert(node != c);
        node->size++;
        DL_APPEND(node->children, c);
    }

#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_EOL(yycontext *yy); /* 14 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 13 */
YY_RULE(int) yy_Expr(yycontext *yy); /* 12 */
YY_RULE(int) yy_Op(yycontext *yy); /* 11 */
YY_RULE(int) yy_Transf(yycontext *yy); /* 10 */
YY_RULE(int) yy_Stmt(yycontext *yy); /* 9 */
YY_RULE(int) yy_Value(yycontext *yy); /* 8 */
YY_RULE(int) yy_Rule(yycontext *yy); /* 7 */
YY_RULE(int) yy_Block(yycontext *yy); /* 6 */
YY_RULE(int) yy_Id(yycontext *yy); /* 5 */
YY_RULE(int) yy_EOF(yycontext *yy); /* 4 */
YY_RULE(int) yy_Shape(yycontext *yy); /* 3 */
YY_RULE(int) yy__(yycontext *yy); /* 2 */
YY_RULE(int) yy_Prog(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_EOL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EOL\n"));
  {
  yy->line++;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Id(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Id\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Value(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Value\n"));
  {
  __ = N(VALUE, NULL); __->v = atof(yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Expr(yycontext *yy, char *yytext, int yyleng)
{
#define v yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Expr\n"));
  {
  __ = v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef v
#undef b
#undef a
}
YY_ACTION(void) yy_1_Expr(yycontext *yy, char *yytext, int yyleng)
{
#define v yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expr\n"));
  {
  __ = N(EXPR, "+-", a, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef v
#undef b
#undef a
}
YY_ACTION(void) yy_3_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Op\n"));
  {
  __ = o;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_2_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Op\n"));
  {
  A(o, e);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_1_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Op\n"));
  {
  o = N(OP, i->id);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_3_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Transf\n"));
  {
  __ = t;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_2_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Transf\n"));
  {
  A(t, o);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_1_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Transf\n"));
  {
  t = N(TRANSF, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_3_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define b yy->__val[-2]
#define t yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Stmt\n"));
  {
  __ = t;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef b
#undef t
#undef n
}
YY_ACTION(void) yy_2_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define b yy->__val[-2]
#define t yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Stmt\n"));
  {
  __ = N(CALL, i->id, t);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef b
#undef t
#undef n
}
YY_ACTION(void) yy_1_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define b yy->__val[-2]
#define t yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Stmt\n"));
  {
  __ = N(LOOP, NULL, t, b);
                                             __->v = n->v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef b
#undef t
#undef n
}
YY_ACTION(void) yy_3_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Block\n"));
  {
  __ = b;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_2_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Block\n"));
  {
  A(b, s);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_1_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Block\n"));
  {
  b = N(BLOCK, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_3_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Rule\n"));
  {
  A(r, b); __ = r;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_2_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Rule\n"));
  {
  r->v = w->v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_1_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Rule\n"));
  {
  r = N(RULE, NULL); r->v = 1.0;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_4_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Shape\n"));
  {
  __ = s;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_3_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Shape\n"));
  {
  A(s, r);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_2_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Shape\n"));
  {
  A(s, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_1_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Shape\n"));
  {
  s = N(SHAPE, i->id);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_3_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Prog\n"));
  {
  g_prog = __ = p;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}
YY_ACTION(void) yy_2_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Prog\n"));
  {
  A(p, s);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}
YY_ACTION(void) yy_1_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Prog\n"));
  {
  p = N(PROG, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}

YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));  if (!yymatchChar(yy, '\n')) goto l1;  yyDo(yy, yy_1_EOL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchString(yy, "//")) goto l2;
  l3:;	
  {  int yypos4= yy->__pos, yythunkpos4= yy->__thunkpos;
  {  int yypos5= yy->__pos, yythunkpos5= yy->__thunkpos;  if (!yy_EOL(yy)) goto l5;  goto l4;
  l5:;	  yy->__pos= yypos5; yy->__thunkpos= yythunkpos5;
  }  if (!yymatchDot(yy)) goto l4;  goto l3;
  l4:;	  yy->__pos= yypos4; yy->__thunkpos= yythunkpos4;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 1;
  l2:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expr(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Expr"));
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;  if (!yy_Value(yy)) goto l8;  yyDo(yy, yySet, -3, 0);  if (!yymatchString(yy, "+-")) goto l8;  if (!yy_Value(yy)) goto l8;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Expr, yy->__begin, yy->__end);  goto l7;
  l8:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;  if (!yy_Value(yy)) goto l6;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Expr, yy->__begin, yy->__end);
  }
  l7:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l6:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Op(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Op"));  if (!yy_Id(yy)) goto l9;  yyDo(yy, yySet, -3, 0);  if (!yy__(yy)) goto l9;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Op, yy->__begin, yy->__end);
  l10:;	
  {  int yypos11= yy->__pos, yythunkpos11= yy->__thunkpos;  if (!yy_Expr(yy)) goto l11;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Op, yy->__begin, yy->__end);  goto l10;
  l11:;	  yy->__pos= yypos11; yy->__thunkpos= yythunkpos11;
  }  if (!yy__(yy)) goto l9;  yyDo(yy, yy_3_Op, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Op", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l9:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Op", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Transf(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Transf"));  if (!yymatchChar(yy, '[')) goto l12;  if (!yy__(yy)) goto l12;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Transf, yy->__begin, yy->__end);
  l13:;	
  {  int yypos14= yy->__pos, yythunkpos14= yy->__thunkpos;  if (!yy_Op(yy)) goto l14;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Transf, yy->__begin, yy->__end);  goto l13;
  l14:;	  yy->__pos= yypos14; yy->__thunkpos= yythunkpos14;
  }  if (!yymatchChar(yy, ']')) goto l12;  if (!yy__(yy)) goto l12;  yyDo(yy, yy_3_Transf, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Transf", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l12:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Transf", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Stmt(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Stmt"));
  {  int yypos16= yy->__pos, yythunkpos16= yy->__thunkpos;  if (!yymatchString(yy, "loop")) goto l17;  if (!yy_Value(yy)) goto l17;  yyDo(yy, yySet, -4, 0);  if (!yy_Transf(yy)) goto l17;  yyDo(yy, yySet, -3, 0);  if (!yy_Block(yy)) goto l17;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Stmt, yy->__begin, yy->__end);  goto l16;
  l17:;	  yy->__pos= yypos16; yy->__thunkpos= yythunkpos16;  if (!yy_Id(yy)) goto l18;  yyDo(yy, yySet, -1, 0);  if (!yy_Transf(yy)) goto l18;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_2_Stmt, yy->__begin, yy->__end);  goto l16;
  l18:;	  yy->__pos= yypos16; yy->__thunkpos= yythunkpos16;  if (!yy_Transf(yy)) goto l15;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_3_Stmt, yy->__begin, yy->__end);
  }
  l16:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmt", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l15:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmt", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Value(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Value"));  if (!yy__(yy)) goto l19;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l19;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\140\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;
  l20:;	
  {  int yypos21= yy->__pos, yythunkpos21= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\140\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;  goto l20;
  l21:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l19;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l19;  yyDo(yy, yy_1_Value, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Value", yy->__buf+yy->__pos));
  return 1;
  l19:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Value", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Rule(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Rule"));  if (!yy__(yy)) goto l22;  yyDo(yy, yySet, -3, 0);  if (!yymatchString(yy, "rule")) goto l22;  yyDo(yy, yy_1_Rule, yy->__begin, yy->__end);
  {  int yypos23= yy->__pos, yythunkpos23= yy->__thunkpos;  if (!yy_Value(yy)) goto l23;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_Rule, yy->__begin, yy->__end);  goto l24;
  l23:;	  yy->__pos= yypos23; yy->__thunkpos= yythunkpos23;
  }
  l24:;	  if (!yy_Block(yy)) goto l22;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Rule, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Rule", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l22:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Rule", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Block(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Block"));  if (!yy__(yy)) goto l25;  if (!yymatchChar(yy, '{')) goto l25;  if (!yy__(yy)) goto l25;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Block, yy->__begin, yy->__end);
  l26:;	
  {  int yypos27= yy->__pos, yythunkpos27= yy->__thunkpos;  if (!yy_Stmt(yy)) goto l27;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Block, yy->__begin, yy->__end);  goto l26;
  l27:;	  yy->__pos= yypos27; yy->__thunkpos= yythunkpos27;
  }  if (!yy__(yy)) goto l25;  if (!yymatchChar(yy, '}')) goto l25;  if (!yy__(yy)) goto l25;  yyDo(yy, yy_3_Block, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Block", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l25:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Block", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Id(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Id"));  if (!yy__(yy)) goto l28;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l28;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l28;
  l29:;	
  {  int yypos30= yy->__pos, yythunkpos30= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l30;  goto l29;
  l30:;	  yy->__pos= yypos30; yy->__thunkpos= yythunkpos30;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l28;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l28;  yyDo(yy, yy_1_Id, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Id", yy->__buf+yy->__pos));
  return 1;
  l28:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Id", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOF(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOF"));
  {  int yypos32= yy->__pos, yythunkpos32= yy->__thunkpos;  if (!yymatchDot(yy)) goto l32;  goto l31;
  l32:;	  yy->__pos= yypos32; yy->__thunkpos= yythunkpos32;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 1;
  l31:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Shape(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Shape"));  if (!yy__(yy)) goto l33;  yyDo(yy, yySet, -4, 0);  if (!yymatchString(yy, "shape")) goto l33;  if (!yy_Id(yy)) goto l33;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_1_Shape, yy->__begin, yy->__end);
  {  int yypos34= yy->__pos, yythunkpos34= yy->__thunkpos;  if (!yy_Block(yy)) goto l35;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_Shape, yy->__begin, yy->__end);  goto l34;
  l35:;	  yy->__pos= yypos34; yy->__thunkpos= yythunkpos34;  if (!yy_Rule(yy)) goto l33;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Shape, yy->__begin, yy->__end);
  l36:;	
  {  int yypos37= yy->__pos, yythunkpos37= yy->__thunkpos;  if (!yy_Rule(yy)) goto l37;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Shape, yy->__begin, yy->__end);  goto l36;
  l37:;	  yy->__pos= yypos37; yy->__thunkpos= yythunkpos37;
  }
  }
  l34:;	  yyDo(yy, yy_4_Shape, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Shape", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l33:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Shape", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy__(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "_"));
  l39:;	
  {  int yypos40= yy->__pos, yythunkpos40= yy->__thunkpos;
  {  int yypos41= yy->__pos, yythunkpos41= yy->__thunkpos;  if (!yy_Comment(yy)) goto l42;  goto l41;
  l42:;	  yy->__pos= yypos41; yy->__thunkpos= yythunkpos41;  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l43;  goto l41;
  l43:;	  yy->__pos= yypos41; yy->__thunkpos= yythunkpos41;  if (!yy_EOL(yy)) goto l40;
  }
  l41:;	  goto l39;
  l40:;	  yy->__pos= yypos40; yy->__thunkpos= yythunkpos40;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Prog(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Prog"));  if (!yy__(yy)) goto l44;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Prog, yy->__begin, yy->__end);  if (!yy_Shape(yy)) goto l44;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Prog, yy->__begin, yy->__end);
  l45:;	
  {  int yypos46= yy->__pos, yythunkpos46= yy->__thunkpos;  if (!yy_Shape(yy)) goto l46;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Prog, yy->__begin, yy->__end);  goto l45;
  l46:;	  yy->__pos= yypos46; yy->__thunkpos= yythunkpos46;
  }  if (!yy__(yy)) goto l44;  yyDo(yy, yy_3_Prog, yy->__begin, yy->__end);  if (!yy_EOF(yy)) goto l44;
  yyprintf((stderr, "  ok   %s @ %s\n", "Prog", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l44:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Prog", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Prog);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif


static node_t *parse(const char *txt, int *err_line)
{
    yycontext yy;
    memset(&yy, 0, sizeof(yy));
    g_input = g_cur = txt;
    g_prog = NULL;
    while (yyparse(&yy))
        ;
    if (!g_prog && err_line) *err_line = yy.read_line;
    yyrelease(&yy);
    return g_prog;
}

